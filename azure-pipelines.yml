# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  newTag: 'v$(Build.BuildId)'  # Tag für die neue Version
  moduleName: 'temperature-sensor'
  edgeModuleName: "tempSensor"  # Der Name des Moduls
  DEPLOYMENT_FILE_PATH: "deployments/edge-deployment.json"

steps:
- checkout: self

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests'
  inputs:
    command: 'test'
    projects: '**/*.csproj'

- script: |
    git fetch --tags
    latest_tag=$(git describe --tags --abbrev=0)
    echo "##vso[task.setvariable variable=imageTag]$(newTag)"
  displayName: 'Set Docker image tag'
  condition: succeeded()  # Führe nur aus, wenn alle vorherigen Schritte erfolgreich sind

- script: |
    docker login $(acr.host) -u $(acr.username) -p $(acr.password)
  displayName: 'Login to Docker Registry'

# Löschen der bin und obj Ordner
- script: |
    rm -rf SensorModul/bin SensorModul/obj
  displayName: 'Löschen der obj und bin ordner für den docker build'
- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    repository: '$(acrName).azurecr.io/$(moduleName)'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(imageTag)

- script: |
    docker buildx create --name multiarch-builder
    docker buildx use multiarch-builder
    docker buildx inspect --bootstrap
  displayName: 'Set up Docker Buildx'
- task: Docker@2
  displayName: 'Build and Push Docker images for ARM and x64'
  inputs:
    repository: '$(acrName).azurecr.io/$(moduleName)'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(imageTag)-x64
      $(imageTag)-arm
    buildContext: '.'
    arguments: '--platform linux/amd64,linux/arm64'
- task: Docker@2
  displayName: 'Build Docker image arm'
  inputs:
    repository: '$(acrName).azurecr.io/$(moduleName)'
    command: 'build'
    arguments: '--platform linux/arm64'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(imageTag)-arm

- task: Docker@2
  displayName: 'Push Docker image'
  inputs:
    repository: '$(acrName).azurecr.io/$(moduleName)'
    command: 'push'
    tags: |
      $(imageTag)
      $(imageTag)-arm


# Lade das Deployment YAML und passe die Modulversion an
- script: |
    echo "Updating module version in deployment YAML..."
    # Update registry credentials
    sed -i "s|\"username\": \"[^\"]*\"|\"username\": \"$(acr.username)\"|" $DEPLOYMENT_FILE_PATH
    sed -i "s|\"password\": \"[^\"]*\"|\"password\": \"$(acr.password)\"|" $DEPLOYMENT_FILE_PATH
    sed -i "s|\"address\": \"[^\"]*\"|\"address\": \"$(acr.host)\"|" $DEPLOYMENT_FILE_PATH
    # Ändere die Version des Moduls in der YAML-Datei
    sed -i "s|\"image\": \"iiotcapgemini.azurecr.io/<${moduleName}>:<${imageTag}>\"|\"image\": \"iiotcapgemini.azurecr.io/${moduleName}:${imageTag}\"|" $DEPLOYMENT_FILE_PATH
    # Zeige den Inhalt der geänderten Datei zur Überprüfung
    cat $DEPLOYMENT_FILE_PATH
    cp  $DEPLOYMENT_FILE_PATH /home/vsts/work/1/s/test.json
  displayName: 'Update Module Version in YAML'
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: /home/vsts/work/1/s/test.json
    artifactName: 'DeploymentManifest'
    publishLocation: 'pipeline'
- task: AzureCLI@2
  inputs:
    azureSubscription: 'TestConnection' 
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az login
      az iot edge set-modules --device-id "minipc1" --hub-name "iothub-qplg6y" --content $DEPLOYMENT_FILE_PATH

- task: AzureIoTEdge@2
  inputs:
    action: 'Deploy to IoT Edge devices'
    deploymentFilePath: '$DEPLOYMENT_FILE_PATH'
    azureSubscription: 'TestConnection'
    iothubname: 'iothub-qplg6y'
    deploymentid: '$(System.TeamProject)-devops-deployment'
    priority: '0'
    deviceOption: 'Single Device'
    deviceId: 'minipc1'
#- task: AzureCLI@2
#  inputs:
#    azureSubscription: 'Microsoft Azure Enterprise(95ab6ba3-4df2-4008-9e40-4790879a9773)'
#    scriptType: 'bash'
#    scriptLocation: 'inlineScript'
#    inlineScript: 'az iot edge deployment show --device-id "minipc1" --hub-name "iothub-qplg6y" --output json > deployment.json'
#    addSpnToEnvironment: true
#- task: AzureCLI@2
#  inputs:
#    azureSubscription: 'Microsoft Azure Enterprise'
#    scriptType: 'bash'
#    scriptLocation: 'inlineScript'
#    inlineScript: az iot edge deployment show --device-id "minipc1" --hub-name "iothub-qplg6y" --output json > deployment.json'
#    addSpnToEnvironment: true


- task: AzureCLI@2
  inputs:
    azureSubscription: 'TestConnection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az iot edge deployment show --device-id "minipc1" --hub-name "iothub-qplg6y" --output json > deployment.json
- script: |
    echo "Updating deployment.json..."
    # Update image tag in the deployment manifest
    jq '.modulesContent.$edgeAgent["properties.desired"].modules["temperatur-sensor"].settings.image = "iiotcapgemini.azurecr.io/$(moduleName):$(imageTag)"' deployment.json > deployment_updated.json
  displayName: 'Update deployment manifest'

