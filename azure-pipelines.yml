# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  newTag: 'v$(Build.BuildId)'  # Tag für die neue Version
  moduleName: 'temperature-sensor'
  edgeModuleName: "temperatureSensor"  # Der Name des Moduls
  DEPLOYMENT_FILE_PATH: "deployments/edge-deployment.json"

steps:
- checkout: self

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests'
  inputs:
    command: 'test'
    projects: '**/*.csproj'

- script: |
    git fetch --tags
    latest_tag=$(git describe --tags --abbrev=0)
    echo "##vso[task.setvariable variable=imageTag]$(newTag)"
  displayName: 'Set Docker image tag'
  condition: succeeded()  # Führe nur aus, wenn alle vorherigen Schritte erfolgreich sind

- script: |
    docker login $(acr.host) -u $(acr.username) -p $(acr.password)
  displayName: 'Login to Docker Registry'

# Löschen der bin und obj Ordner
- script: |
    rm -rf SensorModul/bin SensorModul/obj
  displayName: 'Löschen der obj und bin ordner für den docker build'
- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    repository: '$(acrName).azurecr.io/$(moduleName)'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(imageTag)


- task: Docker@2
  displayName: 'Push Docker image'
  inputs:
    repository: '$(acrName).azurecr.io/$(moduleName)'
    command: 'push'
    tags: |
      $(imageTag)


# Lade das Deployment YAML und passe die Modulversion an
- script: |
    cat $DEPLOYMENT_FILE_PATH
    echo "Updating module version in deployment YAML..."
    # Update registry credentials
    sed -i "s|\"username\": \"[^\"]*\"|\"username\": \"$(acr.username)\"|" $DEPLOYMENT_FILE_PATH
    sed -i "s|\"password\": \"[^\"]*\"|\"password\": \"$(acr.password)\"|" $DEPLOYMENT_FILE_PATH
    sed -i "s|\"address\": \"[^\"]*\"|\"address\": \"$(acr.host)\"|" $DEPLOYMENT_FILE_PATH
    # Ändere die Version des Moduls in der YAML-Datei
    sed -i "s|\"image\": \"iiotcapgemini.azurecr.io/${moduleName}:${newTag}\"|\"image\": \"iiotcapgemini.azurecr.io/${moduleName}:${newTag}\"|" $DEPLOYMENT_FILE_PATH
    # Zeige den Inhalt der geänderten Datei zur Überprüfung
    cat $DEPLOYMENT_FILE_PATH
    cp  $DEPLOYMENT_FILE_PATH /home/vsts/work/1/s/test.json
  displayName: 'Update Module Version in YAML'

#- task: PublishPipelineArtifact@1
#  inputs:
#    targetPath: /home/vsts/work/1/s/deplyoment.json
#    artifactName: 'DeploymentManifest'
#    publishLocation: 'pipeline'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'ServicePrincipal' 
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
     az iot edge set-modules --device-id "minipc1" --hub-name "iothub-qplg6y" --content $DEPLOYMENT_FILE_PATH

#- task: AzureIoTEdge@2
#  inputs:
#    action: 'Deploy to IoT Edge devices'
#    deploymentFilePath: '$DEPLOYMENT_FILE_PATH'
#    azureSubscription: 'TestConnection'
#    iothubname: 'iothub-qplg6y'
#    deploymentid: '$(System.TeamProject)-devops-deployment'
#    priority: '0'
#    deviceOption: 'Single Device'
#    deviceId: 'minipc1'
#- task: AzureIoTEdge@2
#  inputs:
#    action: 'Deploy to IoT Edge devices'
#    deploymentFilePath: '$(DEPLOYMENT_FILE_PATH)'
#    azureSubscription: 'ServicePrincipal'
#    iothubname: 'iothub-qplg6y'
#    deploymentid: '$(System.TeamProject)-devops-deployment'
#    priority: '0'
#    deviceOption: 'Single Device'
#    deviceId: 'minipc1'




