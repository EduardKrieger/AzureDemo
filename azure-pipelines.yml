# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  newTag: 'v$(Build.BuildId)'  # Tag für die neue Version
  moduleName: 'temperature-sensor'

steps:
- checkout: self

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests'
  inputs:
    command: 'test'
    projects: '**/*.csproj'

- script: |
    git fetch --tags
    latest_tag=$(git describe --tags --abbrev=0)
    echo "##vso[task.setvariable variable=imageTag]$(newTag)"
  displayName: 'Set Docker image tag'
  condition: succeeded()  # Führe nur aus, wenn alle vorherigen Schritte erfolgreich sind

- script: |
    docker login $(acr.host) -u $(acr.username) -p $(acr.password)
  displayName: 'Login to Docker Registry'

# Löschen der bin und obj Ordner
- script: |
    rm -rf SensorModul/bin SensorModul/obj
  displayName: 'Löschen der obj und bin ordner für den docker build'

- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    repository: '$(acrName).azurecr.io/$(moduleName)'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(imageTag)

- task: Docker@2
  displayName: 'Push Docker image'
  inputs:
    repository: '$(acrName).azurecr.io/$(moduleName)'
    command: 'push'
    tags: |
      $(imageTag)
